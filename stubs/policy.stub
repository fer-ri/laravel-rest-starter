<?php

namespace DummyNamespace;

use App\Models\User;
use App\Models\{{ modelName }};
use Illuminate\Auth\Access\HandlesAuthorization;

class DummyClass
{
    use HandlesAuthorization;

    /**
     * Create a new policy instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Hook before to intercept all checks
     *
     * @param \App\Models\User $user
     * @param string $ability
     * @return bool|null
     */
    public function before(User $user, $ability)
    {
        if ($user->isSuperAdmin()) {
            return true;
        }
    }

    /**
     * Determine if {{ modelInstance }} can be listed by the user
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function index(User $user)
    {
        return true;
    }

    /**
     * Determine if {{ modelInstance }} can be created by the user
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function store(User $user)
    {
        return true;
    }

    /**
     * Determine if the given {{ modelInstance }} can be showed by the user
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\{{ modelName }} ${{ modelInstance }}
     * @return bool
     */
    public function show(User $user, {{ modelName }} ${{ modelInstance }})
    {
        return true;
    }

    /**
     * Determine if the given {{ modelInstance }} can be updated by the user
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\{{ modelName }} ${{ modelInstance }}
     * @return bool
     */
    public function update(User $user, {{ modelName }} ${{ modelInstance }})
    {
        return true;
    }

    /**
     * Determine if the given {{ modelInstance }} can be deleted by the user
     *
     * @param  \App\Models\User  $user
     * @param  \App\Models\{{ modelName }} ${{ modelInstance }}
     * @return bool
     */
    public function destroy(User $user, {{ modelName }} ${{ modelInstance }})
    {
        return true;
    }
}
